(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{770:function(s,t,a){"use strict";a.r(t);var e=a(1),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"using与typedef定义别名区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using与typedef定义别名区别"}},[s._v("#")]),s._v(" using与typedef定义别名区别")]),s._v(" "),a("p",[s._v("Created: March 19, 2024 1:20 PM")]),s._v(" "),a("p",[s._v("提到类型别名（Type Aliases）时，C++提供了两种主要方式来定义别名：传统的**"),a("code",[s._v("typedef")]),a("strong",[s._v("和C++11引入的")]),a("code",[s._v("using")]),s._v("**声明。虽然它们都用于相同的目的——为类型提供一个新的名字，但在语法和某些用法上有所不同。")]),s._v(" "),a("h3",{attrs:{id:"typedef的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typedef的用法"}},[s._v("#")]),s._v(" "),a("strong",[a("code",[s._v("typedef")]),s._v("的用法")])]),s._v(" "),a("p",[s._v("**"),a("code",[s._v("typedef")]),a("strong",[s._v("是传统的类型别名定义方式，它在C语言中就已经存在，并被C++继承。")]),a("code",[s._v("typedef")]),s._v("**可以用于给复杂的类型定义一个更简短、更易读的名字。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("cppCopy code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" ulong"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("FuncPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"using声明的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using声明的用法"}},[s._v("#")]),s._v(" "),a("strong",[a("code",[s._v("using")]),s._v("声明的用法")])]),s._v(" "),a("p",[s._v("C++11引入了基于**"),a("code",[s._v("using")]),s._v("**的类型别名声明，它提供了一种更现代、更灵活的方式来定义类型别名，尤其是对于模板类型别名。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("cppCopy code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" ulong "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" FuncPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"区别和优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别和优点"}},[s._v("#")]),s._v(" "),a("strong",[s._v("区别和优点")])]),s._v(" "),a("p",[s._v("虽然对于非模板类型别名，**"),a("code",[s._v("typedef")]),a("strong",[s._v("和")]),a("code",[s._v("using")]),a("strong",[s._v("声明在功能上几乎相同，但")]),a("code",[s._v("using")]),s._v("**声明有几个优点：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("一致性")]),s._v("：**"),a("code",[s._v("using")]),s._v("**声明的语法与C++中的其他赋值和类型推导更加一致，使得代码更易读和理解。")]),s._v(" "),a("li",[a("strong",[s._v("模板别名")]),s._v("：**"),a("code",[s._v("using")]),s._v("**声明支持模板，使得可以为模板应用别名，这对于定义复杂的模板类型特别有用。")])]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("cppCopy code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("template")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typename")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" Ptr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",[a("li",[a("strong",[s._v("可读性")]),s._v("：对于复杂的类型定义，**"),a("code",[s._v("using")]),s._v("**声明通常提供了更好的可读性。")])]),s._v(" "),a("h3",{attrs:{id:"示例-模板别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例-模板别名"}},[s._v("#")]),s._v(" "),a("strong",[s._v("示例：模板别名")])]),s._v(" "),a("p",[s._v("**"),a("code",[s._v("using")]),s._v("**声明特别适用于模板类型别名，下面是一个示例，展示了如何为模板类型定义别名：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("cppCopy code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("template")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typename")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" Vec "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nVec"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等同于 std::vector<int> vec;")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" "),a("strong",[s._v("总结")])]),s._v(" "),a("p",[s._v("虽然**"),a("code",[s._v("typedef")]),a("strong",[s._v("和基于")]),a("code",[s._v("using")]),a("strong",[s._v("的类型别名在许多情况下都可以使用，但")]),a("code",[s._v("using")]),a("strong",[s._v("声明提供了更大的灵活性和一致性，尤其是在处理模板时。因此，对于新的代码库或C++11及以上版本，推荐优先使用")]),a("code",[s._v("using")]),s._v("**声明来定义类型别名。")])])}),[],!1,null,null,null);t.default=n.exports}}]);