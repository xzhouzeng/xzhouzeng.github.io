(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{761:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"统一初始化方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统一初始化方式"}},[t._v("#")]),t._v(" {}统一初始化方式")]),t._v(" "),a("p",[t._v("Created: March 19, 2024 1:25 PM")]),t._v(" "),a("p",[t._v('在C++中提到初始化的"歧义"主要是指在C++11之前，不同类型的对象有多种初始化方式，这些方式在某些情况下可能引起代码理解上的混淆或者在特定上下文中的使用不一致性。统一的初始化语法（Uniform initialization）通过引入花括号**'),a("code",[t._v("{}")]),t._v("**作为通用的初始化方式，旨在解决这些问题，从而使初始化语法更加清晰和一致。")]),t._v(" "),a("h3",{attrs:{id:"初始化的歧义例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化的歧义例子"}},[t._v("#")]),t._v(" "),a("strong",[t._v("初始化的歧义例子")])]),t._v(" "),a("p",[t._v("在C++11之前，初始化对象的方式可能包括：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("直接初始化")]),t._v("：使用圆括号**"),a("code",[t._v("()")]),t._v("**。")]),t._v(" "),a("li",[a("strong",[t._v("复制初始化")]),t._v("：使用**"),a("code",[t._v("=")]),t._v("**后跟一个值。")]),t._v(" "),a("li",[a("strong",[t._v("聚合初始化")]),t._v("：对于POD类型使用花括号**"),a("code",[t._v("{}")]),t._v("**。")])]),t._v(" "),a("p",[t._v("这些不同的初始化方式在某些情况下可能引发歧义，例如：")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("cppCopy code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接初始化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制初始化")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接初始化，创建一个大小为5，所有元素为0的vector")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 列表初始化（C++11），创建一个包含两个元素5和0的vector")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("在C++11之前，对于聚合类型（如数组和POD结构），初始化通常使用花括号，但对于非POD类型，则需要使用其他方式，这可能导致不一致和混淆。")]),t._v(" "),a("h3",{attrs:{id:"c-11的统一初始化解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-11的统一初始化解决方案"}},[t._v("#")]),t._v(" "),a("strong",[t._v("C++11的统一初始化解决方案")])]),t._v(" "),a("p",[t._v("C++11引入了统一的初始化语法，允许使用花括号**"),a("code",[t._v("{}")]),t._v("**来初始化任何类型的对象，这包括基本数据类型、聚合类型、容器、自定义类型等，无论是通过调用构造函数还是聚合初始化。这样做的好处包括：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("消除了初始化语法的不一致性")]),t._v("，使得初始化表达式更加统一和清晰。")]),t._v(" "),a("li",[a("strong",[t._v("避免了窄化转换")]),t._v("，编译器会拒绝可能导致数据丢失的隐式类型转换。")]),t._v(" "),a("li",[a("strong",[t._v("提高了代码的可读性和可维护性")]),t._v("。")])]),t._v(" "),a("p",[t._v("使用统一的初始化语法后，初始化表达式更加直观：")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("cppCopy code\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用花括号初始化")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 列表初始化，无歧义")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("通过这种方式，C++11及后续版本的代码在初始化对象时更加一致，减少了歧义和潜在的错误。")])])}),[],!1,null,null,null);s.default=e.exports}}]);